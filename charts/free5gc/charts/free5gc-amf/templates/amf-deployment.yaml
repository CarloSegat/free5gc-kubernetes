#
# Software Name : free5gc-kubernetes
# SPDX-FileCopyrightText: Copyright (c) 2021 Orange
# SPDX-License-Identifier: Apache-2.0
#
# This software is distributed under the Apache License 2.0,
# the text of which is available at https://github.com/Orange-OpenSource/free5gc-kubernetes/blob/main/LICENSE
# or see the "LICENSE" file for more details.
#
# Author: Abderaouf KHICHANE, Ilhem FAJJARI, Ayoub BOUSSELMI
# Software description: An open-source project providing Helm charts to deploy 5G components (Core + RAN) on top of Kubernetes
#
{{- with .Values.amf }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "free5gc-amf.fullname" $ }}-{{ .name }}
  labels:
    {{- include "free5gc-amf.labels" $ | nindent 4 }}
    project: {{ $.Values.global.projectName }}
    nf: {{ .name }}
spec:
  {{- if not .autoscaling.enabled }}
  replicas: {{ .replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "free5gc-amf.selectorLabels" $ | nindent 6 }}
      project: {{ $.Values.global.projectName }}
      nf: {{ .name }}
  template:
    metadata:
      annotations:
        {{- include "free5gc-amf.amfAnnotations" $ | nindent 8 }}
        {{- if and $.Values.isNgapNeeded $.Values.global.n2network.enabled}}
        k8s.v1.cni.cncf.io/networks: '[
            { "name": "{{ $.Values.global.n2network.name }}-{{ include "free5gc-amf.fullname" $ }}",
              "interface": "n2",
              "ips": [ "{{ $.Values.global.amf.n2if.ipAddress }}/{{ $.Values.global.n2network.cidr }}" ],
              "gateway": [ "{{ $.Values.global.n2network.gatewayIP }}" ]
            }]'
        {{- end }}
        checksum/config: {{ include (print $.Template.BasePath "/amf-configmap.yaml") $ | sha256sum }}
      labels:
        {{- include "free5gc-amf.selectorLabels" $ | nindent 8 }}
        project: {{ $.Values.global.projectName }}
        nf: {{ .name }}
    spec:
      imagePullSecrets:
        {{- toYaml .imagePullSecrets | nindent 8 }}
      securityContext:
        {{- toYaml .podSecurityContext | nindent 8 }}
      hostAliases: 
        {{- toYaml $.Values.hostAliases | nindent 8 }}
      initContainers:
      - name: wait-nrf
        {{- with $.Values.initcontainers.curl }}
        image: {{ .registry }}/{{ .image }}:{{ .tag }}
        {{- end }}
        env:
        - name: DEPENDENCIES
          value: {{ $.Values.global.sbi.scheme }}://{{ $.Values.global.nrf.service.name }}:{{ $.Values.global.nrf.service.port }}
        command: ['sh', '-c', 'set -x; for dependency in $DEPENDENCIES; do while [ $(curl --insecure --connect-timeout 1 -s -o /dev/null -w "%{http_code}" $dependency) -ne 200 ]; do echo waiting for dependencies; sleep 1; done; sleep 15; done;']
      initContainers:
      - name: init-db
        image: postgres:14.1-alpine
        command: ['sh', '-c', '
          until psql -h postgres -U postgres -c "
            CREATE DATABASE channels;
            GRANT ALL PRIVILEGES ON DATABASE channels TO postgres;
            \c channels;
            CREATE TABLE channels (
              id serial PRIMARY KEY,
              public_did VARCHAR (50) NOT NULL,
              nf_type VARCHAR(50) NOT NULL,
              connection_id VARCHAR(50) NOT NULL,
              authenticated BOOLEAN NOT NULL,
              authorization_consumer BOOLEAN NOT NULL,
              authorization_producer BOOLEAN NOT NULL
            );
          "; do
            echo "Waiting for PostgreSQL to start...";
            sleep 1;
          done
        ']
      containers:
      - name: {{ .name }}
        image: {{ .image.name }}:{{ .image.tag | default $.Chart.AppVersion }}
        imagePullPolicy: {{ .image.pullPolicy }}
        securityContext:
            {{- toYaml .securityContext | nindent 12 }}
        ports:
        - containerPort: {{ .service.port }}
        ports:
        - name: namf
          containerPort: {{ .service.port }}
        {{- if $.Values.isNgapNeeded }}
        - name: n2
          containerPort: {{ $.Values.global.amf.service.ngap.port }}
          protocol: {{ $.Values.global.amf.service.ngap.protocol }}
        {{- end }}
        command: ["./amf"]
        args: ["-c", "../config/amfcfg.yaml"]
        env:
          - name: GIN_MODE
            value: release
        volumeMounts:
        - mountPath: {{ .volume.mount }}
          name: {{ include "free5gc-amf.fullname" $ }}-volume
        resources:
            {{- toYaml .resources | nindent 12 }}
      - name: controller
        image: "{{ $.Values.controller.image }}:{{ $.Values.controller.tag }}"
        ports:
        - containerPort: 9999
        env:
        - name: NF_TYPE
          value: "{{ $.Values.controller.env.NF_TYPE }}"
        - name: ISSUER_DID
          value: "{{ $.Values.global.env.ISSUER_DID }}"
      - name: database
        image: {{ $.Values.database.image }}
        ports:
          - containerPort: 5432
        volumeMounts:
          - mountPath: /var/lib/postgresql/{{ $.Values.controller.env.NF_TYPE }}/data
            name: {{ $.Values.controller.env.NF_TYPE }}-data
      - name: acapy
        image: {{ $.Values.acapy.image }}
        env:
        - name: ACAPY_ADMIN_INSECURE_MODE
          value: "{{ $.Values.acapy.env.ACAPY_ADMIN_INSECURE_MODE }}"
        - name: ACAPY_AUTO_PROVISION
          value: "{{ $.Values.acapy.env.ACAPY_AUTO_PROVISION }}"
        - name: ACAPY_DEBUG_CONNECTIONS
          value: "{{ $.Values.acapy.env.ACAPY_DEBUG_CONNECTIONS }}"
        - name: ACAPY_ENDPOINT
          value: "{{ $.Values.acapy.env.ACAPY_ENDPOINT }}"
        - name: ACAPY_LABEL
          value: "{{ $.Values.acapy.env.ACAPY_LABEL }}"
        - name: ACAPY_LOG_LEVEL
          value: "{{ $.Values.acapy.env.ACAPY_LOG_LEVEL }}"
        - name: ACAPY_GENESIS_URL
          value: "{{ $.Values.acapy.env.ACAPY_GENESIS_URL }}"
        - name: ADMIN_PORT
          value: "{{ $.Values.acapy.env.ADMIN_PORT }}"
        - name: AGENT_PORT
          value: "{{ $.Values.acapy.env.AGENT_PORT }}"
        command:
          - "/bin/bash"
          - "-c"
          - >
            aca-py start \
              --admin '0.0.0.0' {{ $.Values.acapy.env.ADMIN_PORT }} \
              --inbound-transport http '0.0.0.0' {{ $.Values.acapy.env.AGENT_PORT }} \
              --webhook-url 'localhost:8888/webhooks' \
              --outbound-transport http \
              --wallet-type askar \
              --wallet-name tub-wallet \
              --wallet-key tub-key \
              --preserve-exchange-records \
              --auto-provision \
              --public-invites \
              --auto-accept-invites \
              --seed {{ $.Values.acapy.env.SEED }} \
              --auto-accept-requests \
              --auto-ping-connection \
              --auto-respond-credential-proposal \
              --auto-respond-credential-offer \
              --auto-respond-credential-request \
              --auto-respond-presentation-proposal \
              --auto-respond-presentation-request \
              --auto-store-credential \
              --auto-verify-presentation \
              --preserve-exchange-records \
              --invite-public \
              --requests-through-public-did \
              --log-level INFO
        ports:
          - containerPort: 5555
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      nodeSelector:
        {{- toYaml .nodeSelector | nindent 8 }}
      affinity:
        {{- toYaml .affinity | nindent 8 }}
      tolerations:
        {{- toYaml .tolerations | nindent 8 }}


      volumes:
      - name: {{ include "free5gc-amf.fullname" $ }}-volume
        projected:
          sources:
          - configMap:
              name: {{ include "free5gc-amf.fullname" $ }}-configmap
            volumes:
      - name: {{ $.Values.controller.env.NF_TYPE }}-data
        persistentVolumeClaim:
          claimName: {{ $.Values.controller.env.NF_TYPE }}-data
{{- end }}
